
Diagram for Non-Terminal: Program
  State 0
    --[DeclarationList (NON_TERMINAL)]--> State 2
  State 1 (final)
  State 2
    --[$ (TERMINAL)]--> State 1

Diagram for Non-Terminal: DeclarationList
  State 3
    --[Declaration (NON_TERMINAL)]--> State 5
    --[epsilon (EPSILON)]--> State 4
  State 4 (final)
  State 5
    --[DeclarationList (NON_TERMINAL)]--> State 4

Diagram for Non-Terminal: Declaration
  State 6
    --[DeclarationInitial (NON_TERMINAL)]--> State 8
  State 7 (final)
  State 8
    --[DeclarationPrime (NON_TERMINAL)]--> State 7

Diagram for Non-Terminal: DeclarationInitial
  State 9
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 11
  State 10 (final)
  State 11
    --[TypeSpecifier (NON_TERMINAL)]--> State 12
  State 12
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 13
  State 13
    --[ID (TERMINAL)]--> State 10

Diagram for Non-Terminal: DeclarationPrime
  State 14
    --[FunDeclarationPrime (NON_TERMINAL)]--> State 15
    --[VarDeclarationPrime (NON_TERMINAL)]--> State 15
  State 15 (final)

Diagram for Non-Terminal: VarDeclarationPrime
  State 16
    --[; (TERMINAL)]--> State 18
    --[[ (TERMINAL)]--> State 19
  State 17 (final)
  State 18
    --[#var_declare (ACTION_SYMBOL)]--> State 17
  State 19
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 20
  State 20
    --[NUM (TERMINAL)]--> State 21
  State 21
    --[] (TERMINAL)]--> State 22
  State 22
    --[; (TERMINAL)]--> State 23
  State 23
    --[#arr_declare (ACTION_SYMBOL)]--> State 17

Diagram for Non-Terminal: FunDeclarationPrime
  State 24
    --[#func_declare (ACTION_SYMBOL)]--> State 26
  State 25 (final)
  State 26
    --[( (TERMINAL)]--> State 27
  State 27
    --[Params (NON_TERMINAL)]--> State 28
  State 28
    --[) (TERMINAL)]--> State 29
  State 29
    --[#args_info (ACTION_SYMBOL)]--> State 30
  State 30
    --[CompoundStmt (NON_TERMINAL)]--> State 31
  State 31
    --[#fun_end (ACTION_SYMBOL)]--> State 25

Diagram for Non-Terminal: TypeSpecifier
  State 32
    --[int (TERMINAL)]--> State 33
    --[void (TERMINAL)]--> State 33
  State 33 (final)

Diagram for Non-Terminal: Params
  State 34
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 36
    --[void (TERMINAL)]--> State 35
  State 35 (final)
  State 36
    --[int (TERMINAL)]--> State 37
  State 37
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 38
  State 38
    --[ID (TERMINAL)]--> State 39
  State 39
    --[ParamPrime (NON_TERMINAL)]--> State 40
  State 40
    --[ParamList (NON_TERMINAL)]--> State 35

Diagram for Non-Terminal: ParamList
  State 41
    --[, (TERMINAL)]--> State 43
    --[epsilon (EPSILON)]--> State 42
  State 42 (final)
  State 43
    --[Param (NON_TERMINAL)]--> State 44
  State 44
    --[ParamList (NON_TERMINAL)]--> State 42

Diagram for Non-Terminal: Param
  State 45
    --[DeclarationInitial (NON_TERMINAL)]--> State 47
  State 46 (final)
  State 47
    --[ParamPrime (NON_TERMINAL)]--> State 46

Diagram for Non-Terminal: ParamPrime
  State 48
    --[[ (TERMINAL)]--> State 50
    --[Îµ (NON_TERMINAL)]--> State 52
  State 49 (final)
  State 50
    --[] (TERMINAL)]--> State 51
  State 51
    --[#ptr_declare (ACTION_SYMBOL)]--> State 49
  State 52
    --[#var_declare (ACTION_SYMBOL)]--> State 49

Diagram for Non-Terminal: CompoundStmt
  State 53
    --[{ (TERMINAL)]--> State 55
  State 54 (final)
  State 55
    --[DeclarationList (NON_TERMINAL)]--> State 56
  State 56
    --[StatementList (NON_TERMINAL)]--> State 57
  State 57
    --[} (TERMINAL)]--> State 54

Diagram for Non-Terminal: StatementList
  State 58
    --[Statement (NON_TERMINAL)]--> State 60
    --[epsilon (EPSILON)]--> State 59
  State 59 (final)
  State 60
    --[StatementList (NON_TERMINAL)]--> State 59

Diagram for Non-Terminal: Statement
  State 61
    --[ExpressionStmt (NON_TERMINAL)]--> State 62
    --[CompoundStmt (NON_TERMINAL)]--> State 62
    --[SelectionStmt (NON_TERMINAL)]--> State 62
    --[IterationStmt (NON_TERMINAL)]--> State 62
    --[ReturnStmt (NON_TERMINAL)]--> State 62
  State 62 (final)

Diagram for Non-Terminal: ExpressionStmt
  State 63
    --[Expression (NON_TERMINAL)]--> State 65
    --[break (TERMINAL)]--> State 66
    --[; (TERMINAL)]--> State 64
  State 64 (final)
  State 65
    --[; (TERMINAL)]--> State 64
  State 66
    --[; (TERMINAL)]--> State 67
  State 67
    --[#br_save (ACTION_SYMBOL)]--> State 64

Diagram for Non-Terminal: SelectionStmt
  State 68
    --[if (TERMINAL)]--> State 70
  State 69 (final)
  State 70
    --[( (TERMINAL)]--> State 71
  State 71
    --[Expression (NON_TERMINAL)]--> State 72
  State 72
    --[) (TERMINAL)]--> State 73
  State 73
    --[#save_cond (ACTION_SYMBOL)]--> State 74
  State 74
    --[Statement (NON_TERMINAL)]--> State 75
  State 75
    --[else (TERMINAL)]--> State 76
  State 76
    --[#save_jpf (ACTION_SYMBOL)]--> State 77
  State 77
    --[Statement (NON_TERMINAL)]--> State 78
  State 78
    --[#jp (ACTION_SYMBOL)]--> State 69

Diagram for Non-Terminal: IterationStmt
  State 79
    --[while (TERMINAL)]--> State 81
  State 80 (final)
  State 81
    --[#save_while_uncond (ACTION_SYMBOL)]--> State 82
  State 82
    --[( (TERMINAL)]--> State 83
  State 83
    --[Expression (NON_TERMINAL)]--> State 84
  State 84
    --[) (TERMINAL)]--> State 85
  State 85
    --[#save_while_cond_jpf (ACTION_SYMBOL)]--> State 86
  State 86
    --[Statement (NON_TERMINAL)]--> State 87
  State 87
    --[#fill_while_body (ACTION_SYMBOL)]--> State 80

Diagram for Non-Terminal: ReturnStmt
  State 88
    --[return (TERMINAL)]--> State 90
  State 89 (final)
  State 90
    --[ReturnStmtPrime (NON_TERMINAL)]--> State 89

Diagram for Non-Terminal: ReturnStmtPrime
  State 91
    --[#return_jp (ACTION_SYMBOL)]--> State 93
    --[Expression (NON_TERMINAL)]--> State 94
  State 92 (final)
  State 93
    --[; (TERMINAL)]--> State 92
  State 94
    --[#save_return_value (ACTION_SYMBOL)]--> State 95
  State 95
    --[; (TERMINAL)]--> State 92

Diagram for Non-Terminal: Expression
  State 96
    --[SimpleExpressionZegond (NON_TERMINAL)]--> State 97
    --[#pid (ACTION_SYMBOL)]--> State 98
  State 97 (final)
  State 98
    --[ID (TERMINAL)]--> State 99
  State 99
    --[B (NON_TERMINAL)]--> State 100
  State 100
    --[#print (ACTION_SYMBOL)]--> State 97

Diagram for Non-Terminal: B
  State 101
    --[= (TERMINAL)]--> State 103
    --[[ (TERMINAL)]--> State 105
    --[SimpleExpressionPrime (NON_TERMINAL)]--> State 102
  State 102 (final)
  State 103
    --[Expression (NON_TERMINAL)]--> State 104
  State 104
    --[#assign (ACTION_SYMBOL)]--> State 102
  State 105
    --[Expression (NON_TERMINAL)]--> State 106
  State 106
    --[] (TERMINAL)]--> State 107
  State 107
    --[#array_addr (ACTION_SYMBOL)]--> State 108
  State 108
    --[H (NON_TERMINAL)]--> State 102

Diagram for Non-Terminal: H
  State 109
    --[= (TERMINAL)]--> State 111
    --[G (NON_TERMINAL)]--> State 113
  State 110 (final)
  State 111
    --[Expression (NON_TERMINAL)]--> State 112
  State 112
    --[#assign (ACTION_SYMBOL)]--> State 110
  State 113
    --[D (NON_TERMINAL)]--> State 114
  State 114
    --[C (NON_TERMINAL)]--> State 110

Diagram for Non-Terminal: SimpleExpressionZegond
  State 115
    --[AdditiveExpressionZegond (NON_TERMINAL)]--> State 117
  State 116 (final)
  State 117
    --[C (NON_TERMINAL)]--> State 116

Diagram for Non-Terminal: SimpleExpressionPrime
  State 118
    --[AdditiveExpressionPrime (NON_TERMINAL)]--> State 120
  State 119 (final)
  State 120
    --[C (NON_TERMINAL)]--> State 119

Diagram for Non-Terminal: C
  State 121
    --[Relop (NON_TERMINAL)]--> State 123
    --[epsilon (EPSILON)]--> State 122
  State 122 (final)
  State 123
    --[AdditiveExpression (NON_TERMINAL)]--> State 124
  State 124
    --[#relation (ACTION_SYMBOL)]--> State 122

Diagram for Non-Terminal: Relop
  State 125
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 127
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 128
  State 126 (final)
  State 127
    --[< (TERMINAL)]--> State 126
  State 128
    --[== (TERMINAL)]--> State 126

Diagram for Non-Terminal: AdditiveExpression
  State 129
    --[Term (NON_TERMINAL)]--> State 131
  State 130 (final)
  State 131
    --[D (NON_TERMINAL)]--> State 130

Diagram for Non-Terminal: AdditiveExpressionPrime
  State 132
    --[TermPrime (NON_TERMINAL)]--> State 134
  State 133 (final)
  State 134
    --[D (NON_TERMINAL)]--> State 133

Diagram for Non-Terminal: AdditiveExpressionZegond
  State 135
    --[TermZegond (NON_TERMINAL)]--> State 137
  State 136 (final)
  State 137
    --[D (NON_TERMINAL)]--> State 136

Diagram for Non-Terminal: D
  State 138
    --[Addop (NON_TERMINAL)]--> State 140
    --[epsilon (EPSILON)]--> State 139
  State 139 (final)
  State 140
    --[Term (NON_TERMINAL)]--> State 141
  State 141
    --[#arithm_op (ACTION_SYMBOL)]--> State 142
  State 142
    --[D (NON_TERMINAL)]--> State 139

Diagram for Non-Terminal: Addop
  State 143
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 145
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 146
  State 144 (final)
  State 145
    --[+ (TERMINAL)]--> State 144
  State 146
    --[- (TERMINAL)]--> State 144

Diagram for Non-Terminal: Term
  State 147
    --[SignedFactor (NON_TERMINAL)]--> State 149
  State 148 (final)
  State 149
    --[G (NON_TERMINAL)]--> State 148

Diagram for Non-Terminal: TermPrime
  State 150
    --[SignedFactorPrime (NON_TERMINAL)]--> State 152
  State 151 (final)
  State 152
    --[G (NON_TERMINAL)]--> State 151

Diagram for Non-Terminal: TermZegond
  State 153
    --[SignedFactorZegond (NON_TERMINAL)]--> State 155
  State 154 (final)
  State 155
    --[G (NON_TERMINAL)]--> State 154

Diagram for Non-Terminal: G
  State 156
    --[* (TERMINAL)]--> State 158
    --[epsilon (EPSILON)]--> State 157
  State 157 (final)
  State 158
    --[SignedFactor (NON_TERMINAL)]--> State 159
  State 159
    --[#mult (ACTION_SYMBOL)]--> State 160
  State 160
    --[G (NON_TERMINAL)]--> State 157

Diagram for Non-Terminal: SignedFactor
  State 161
    --[+ (TERMINAL)]--> State 163
    --[- (TERMINAL)]--> State 164
    --[Factor (NON_TERMINAL)]--> State 162
  State 162 (final)
  State 163
    --[Factor (NON_TERMINAL)]--> State 162
  State 164
    --[Factor (NON_TERMINAL)]--> State 162

Diagram for Non-Terminal: SignedFactorPrime
  State 165
    --[FactorPrime (NON_TERMINAL)]--> State 166
  State 166 (final)

Diagram for Non-Terminal: SignedFactorZegond
  State 167
    --[+ (TERMINAL)]--> State 169
    --[- (TERMINAL)]--> State 170
    --[FactorZegond (NON_TERMINAL)]--> State 168
  State 168 (final)
  State 169
    --[Factor (NON_TERMINAL)]--> State 168
  State 170
    --[Factor (NON_TERMINAL)]--> State 168

Diagram for Non-Terminal: Factor
  State 171
    --[( (TERMINAL)]--> State 173
    --[#pid (ACTION_SYMBOL)]--> State 175
    --[#push_imm_in_semantic_stack (ACTION_SYMBOL)]--> State 177
  State 172 (final)
  State 173
    --[Expression (NON_TERMINAL)]--> State 174
  State 174
    --[) (TERMINAL)]--> State 172
  State 175
    --[ID (TERMINAL)]--> State 176
  State 176
    --[VarCallPrime (NON_TERMINAL)]--> State 172
  State 177
    --[NUM (TERMINAL)]--> State 172

Diagram for Non-Terminal: VarCallPrime
  State 178
    --[#args_begin (ACTION_SYMBOL)]--> State 180
    --[VarPrime (NON_TERMINAL)]--> State 179
  State 179 (final)
  State 180
    --[( (TERMINAL)]--> State 181
  State 181
    --[Args (NON_TERMINAL)]--> State 182
  State 182
    --[) (TERMINAL)]--> State 183
  State 183
    --[#args_end (ACTION_SYMBOL)]--> State 179

Diagram for Non-Terminal: VarPrime
  State 184
    --[[ (TERMINAL)]--> State 186
    --[epsilon (EPSILON)]--> State 185
  State 185 (final)
  State 186
    --[Expression (NON_TERMINAL)]--> State 187
  State 187
    --[] (TERMINAL)]--> State 188
  State 188
    --[#array_addr (ACTION_SYMBOL)]--> State 185

Diagram for Non-Terminal: FactorPrime
  State 189
    --[#args_begin (ACTION_SYMBOL)]--> State 191
    --[epsilon (EPSILON)]--> State 190
  State 190 (final)
  State 191
    --[( (TERMINAL)]--> State 192
  State 192
    --[Args (NON_TERMINAL)]--> State 193
  State 193
    --[) (TERMINAL)]--> State 194
  State 194
    --[#args_end (ACTION_SYMBOL)]--> State 190

Diagram for Non-Terminal: FactorZegond
  State 195
    --[( (TERMINAL)]--> State 197
    --[#push_imm_in_semantic_stack (ACTION_SYMBOL)]--> State 199
  State 196 (final)
  State 197
    --[Expression (NON_TERMINAL)]--> State 198
  State 198
    --[) (TERMINAL)]--> State 196
  State 199
    --[NUM (TERMINAL)]--> State 196

Diagram for Non-Terminal: Args
  State 200
    --[ArgList (NON_TERMINAL)]--> State 201
    --[epsilon (EPSILON)]--> State 201
  State 201 (final)

Diagram for Non-Terminal: ArgList
  State 202
    --[Expression (NON_TERMINAL)]--> State 204
  State 203 (final)
  State 204
    --[ArgListPrime (NON_TERMINAL)]--> State 203

Diagram for Non-Terminal: ArgListPrime
  State 205
    --[, (TERMINAL)]--> State 207
    --[epsilon (EPSILON)]--> State 206
  State 206 (final)
  State 207
    --[Expression (NON_TERMINAL)]--> State 208
  State 208
    --[ArgListPrime (NON_TERMINAL)]--> State 206
Current Token int Current State 0
Determining edge type DeclarationList NON_TERMINAL
Current Token int Current State 3
Determining edge type Declaration NON_TERMINAL
Determining edge type epsilon EPSILON
Current Token int Current State 6
Determining edge type DeclarationInitial NON_TERMINAL
Current Token int Current State 9
Determining edge type #push_in_semantic_stack ACTION_SYMBOL
edge with action symbol detected
on action
11 action #push_in_semantic_stack
Next edge after action symbol <Phase2.src.TransitionDiagram.ParserEdge object at 0x101350550> symbol TypeSpecifier
Next edge was non terminal
Current Token int Current State 32
Determining edge type int TERMINAL
Determining edge type void TERMINAL
Current Token a Current State 33
Current Token a Current State 12
Determining edge type #push_in_semantic_stack ACTION_SYMBOL
edge with action symbol detected
on action
13 action #push_in_semantic_stack
Next edge after action symbol <Phase2.src.TransitionDiagram.ParserEdge object at 0x1012624e0> symbol ID
before calling action, now in terminal case
Current Token ; Current State 10
Current Token ; Current State 8
Determining edge type DeclarationPrime NON_TERMINAL
Current Token ; Current State 14
Determining edge type FunDeclarationPrime NON_TERMINAL
Determining edge type VarDeclarationPrime NON_TERMINAL
Current Token ; Current State 16
Determining edge type ; TERMINAL
Determining edge type [ TERMINAL
Current Token $ Current State 18
Determining edge type #var_declare ACTION_SYMBOL
edge with action symbol detected
on action
17 action #var_declare
