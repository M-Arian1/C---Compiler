symbol DeclarationList False end
when building diagrams
symbol DeclarationList
EdgeType.NON_TERMINAL
epsilon checking False
symbol $ False end
when building diagrams
symbol $
EdgeType.TERMINAL
epsilon checking False
symbol Declaration False end
when building diagrams
symbol Declaration
EdgeType.NON_TERMINAL
epsilon checking False
symbol DeclarationList False end
when building diagrams
symbol DeclarationList
EdgeType.NON_TERMINAL
epsilon checking False
symbol DeclarationInitial False end
when building diagrams
symbol DeclarationInitial
EdgeType.NON_TERMINAL
epsilon checking False
symbol DeclarationPrime False end
when building diagrams
symbol DeclarationPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol #push_in_semantic_stack True end
when building diagrams
symbol #push_in_semantic_stack
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol TypeSpecifier False end
when building diagrams
symbol TypeSpecifier
EdgeType.NON_TERMINAL
epsilon checking False
symbol #push_in_semantic_stack True end
when building diagrams
symbol #push_in_semantic_stack
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ID False end
when building diagrams
symbol ID
EdgeType.TERMINAL
epsilon checking False
symbol FunDeclarationPrime False end
when building diagrams
symbol FunDeclarationPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol VarDeclarationPrime False end
when building diagrams
symbol VarDeclarationPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol ; False end
when building diagrams
symbol ;
EdgeType.TERMINAL
epsilon checking False
symbol #var_declare True end
when building diagrams
symbol #var_declare
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol [ False end
when building diagrams
symbol [
EdgeType.TERMINAL
epsilon checking False
symbol #push_in_semantic_stack True end
when building diagrams
symbol #push_in_semantic_stack
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol NUM False end
when building diagrams
symbol NUM
EdgeType.TERMINAL
epsilon checking False
symbol ] False end
when building diagrams
symbol ]
EdgeType.TERMINAL
epsilon checking False
symbol ; False end
when building diagrams
symbol ;
EdgeType.TERMINAL
epsilon checking False
symbol #arr_declare True end
when building diagrams
symbol #arr_declare
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol #func_declare True end
when building diagrams
symbol #func_declare
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ( False end
when building diagrams
symbol (
EdgeType.TERMINAL
epsilon checking False
symbol Params False end
when building diagrams
symbol Params
EdgeType.NON_TERMINAL
epsilon checking False
symbol ) False end
when building diagrams
symbol )
EdgeType.TERMINAL
epsilon checking False
symbol #args_info True end
when building diagrams
symbol #args_info
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol CompoundStmt False end
when building diagrams
symbol CompoundStmt
EdgeType.NON_TERMINAL
epsilon checking False
symbol #fun_end True end
when building diagrams
symbol #fun_end
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol int False end
when building diagrams
symbol int
EdgeType.TERMINAL
epsilon checking False
symbol void False end
when building diagrams
symbol void
EdgeType.TERMINAL
epsilon checking False
symbol #push_param_in_semantic_stack True end
when building diagrams
symbol #push_param_in_semantic_stack
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol int False end
when building diagrams
symbol int
EdgeType.TERMINAL
epsilon checking False
symbol #push_param_in_semantic_stack True end
when building diagrams
symbol #push_param_in_semantic_stack
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ID False end
when building diagrams
symbol ID
EdgeType.TERMINAL
epsilon checking False
symbol ParamPrime False end
when building diagrams
symbol ParamPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol ParamList False end
when building diagrams
symbol ParamList
EdgeType.NON_TERMINAL
epsilon checking False
symbol void False end
when building diagrams
symbol void
EdgeType.TERMINAL
epsilon checking False
symbol , False end
when building diagrams
symbol ,
EdgeType.TERMINAL
epsilon checking False
symbol Param False end
when building diagrams
symbol Param
EdgeType.NON_TERMINAL
epsilon checking False
symbol ParamList False end
when building diagrams
symbol ParamList
EdgeType.NON_TERMINAL
epsilon checking False
symbol DeclarationInitial False end
when building diagrams
symbol DeclarationInitial
EdgeType.NON_TERMINAL
epsilon checking False
symbol ParamPrime False end
when building diagrams
symbol ParamPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol [ False end
when building diagrams
symbol [
EdgeType.TERMINAL
epsilon checking False
symbol ] False end
when building diagrams
symbol ]
EdgeType.TERMINAL
epsilon checking False
symbol #ptr_declare True end
when building diagrams
symbol #ptr_declare
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ε False end
when building diagrams
symbol ε
EdgeType.EPSILON
epsilon checking True
symbol #param_declare True end
when building diagrams
symbol #param_declare
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol { False end
when building diagrams
symbol {
EdgeType.TERMINAL
epsilon checking False
symbol DeclarationList False end
when building diagrams
symbol DeclarationList
EdgeType.NON_TERMINAL
epsilon checking False
symbol StatementList False end
when building diagrams
symbol StatementList
EdgeType.NON_TERMINAL
epsilon checking False
symbol } False end
when building diagrams
symbol }
EdgeType.TERMINAL
epsilon checking False
symbol Statement False end
when building diagrams
symbol Statement
EdgeType.NON_TERMINAL
epsilon checking False
symbol StatementList False end
when building diagrams
symbol StatementList
EdgeType.NON_TERMINAL
epsilon checking False
symbol ExpressionStmt False end
when building diagrams
symbol ExpressionStmt
EdgeType.NON_TERMINAL
epsilon checking False
symbol CompoundStmt False end
when building diagrams
symbol CompoundStmt
EdgeType.NON_TERMINAL
epsilon checking False
symbol SelectionStmt False end
when building diagrams
symbol SelectionStmt
EdgeType.NON_TERMINAL
epsilon checking False
symbol IterationStmt False end
when building diagrams
symbol IterationStmt
EdgeType.NON_TERMINAL
epsilon checking False
symbol ReturnStmt False end
when building diagrams
symbol ReturnStmt
EdgeType.NON_TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol ; False end
when building diagrams
symbol ;
EdgeType.TERMINAL
epsilon checking False
symbol #remove_exp_result True end
when building diagrams
symbol #remove_exp_result
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol break False end
when building diagrams
symbol break
EdgeType.TERMINAL
epsilon checking False
symbol ; False end
when building diagrams
symbol ;
EdgeType.TERMINAL
epsilon checking False
symbol #br_save True end
when building diagrams
symbol #br_save
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ; False end
when building diagrams
symbol ;
EdgeType.TERMINAL
epsilon checking False
symbol if False end
when building diagrams
symbol if
EdgeType.TERMINAL
epsilon checking False
symbol ( False end
when building diagrams
symbol (
EdgeType.TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol ) False end
when building diagrams
symbol )
EdgeType.TERMINAL
epsilon checking False
symbol #save_cond True end
when building diagrams
symbol #save_cond
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol Statement False end
when building diagrams
symbol Statement
EdgeType.NON_TERMINAL
epsilon checking False
symbol else False end
when building diagrams
symbol else
EdgeType.TERMINAL
epsilon checking False
symbol #save_jpf True end
when building diagrams
symbol #save_jpf
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol Statement False end
when building diagrams
symbol Statement
EdgeType.NON_TERMINAL
epsilon checking False
symbol #jp True end
when building diagrams
symbol #jp
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol while False end
when building diagrams
symbol while
EdgeType.TERMINAL
epsilon checking False
symbol #save_while_uncond True end
when building diagrams
symbol #save_while_uncond
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ( False end
when building diagrams
symbol (
EdgeType.TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol ) False end
when building diagrams
symbol )
EdgeType.TERMINAL
epsilon checking False
symbol #save_while_cond_jpf True end
when building diagrams
symbol #save_while_cond_jpf
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol Statement False end
when building diagrams
symbol Statement
EdgeType.NON_TERMINAL
epsilon checking False
symbol #fill_while_body True end
when building diagrams
symbol #fill_while_body
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol return False end
when building diagrams
symbol return
EdgeType.TERMINAL
epsilon checking False
symbol ReturnStmtPrime False end
when building diagrams
symbol ReturnStmtPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol #return_jp True end
when building diagrams
symbol #return_jp
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ; False end
when building diagrams
symbol ;
EdgeType.TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol #save_return_value True end
when building diagrams
symbol #save_return_value
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ; False end
when building diagrams
symbol ;
EdgeType.TERMINAL
epsilon checking False
symbol SimpleExpressionZegond False end
when building diagrams
symbol SimpleExpressionZegond
EdgeType.NON_TERMINAL
epsilon checking False
symbol #pid True end
when building diagrams
symbol #pid
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ID False end
when building diagrams
symbol ID
EdgeType.TERMINAL
epsilon checking False
symbol B False end
when building diagrams
symbol B
EdgeType.NON_TERMINAL
epsilon checking False
symbol = False end
when building diagrams
symbol =
EdgeType.TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol #assign True end
when building diagrams
symbol #assign
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol [ False end
when building diagrams
symbol [
EdgeType.TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol ] False end
when building diagrams
symbol ]
EdgeType.TERMINAL
epsilon checking False
symbol #array_addr True end
when building diagrams
symbol #array_addr
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol H False end
when building diagrams
symbol H
EdgeType.NON_TERMINAL
epsilon checking False
symbol SimpleExpressionPrime False end
when building diagrams
symbol SimpleExpressionPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol = False end
when building diagrams
symbol =
EdgeType.TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol #assign True end
when building diagrams
symbol #assign
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol G False end
when building diagrams
symbol G
EdgeType.NON_TERMINAL
epsilon checking False
symbol D False end
when building diagrams
symbol D
EdgeType.NON_TERMINAL
epsilon checking False
symbol C False end
when building diagrams
symbol C
EdgeType.NON_TERMINAL
epsilon checking False
symbol AdditiveExpressionZegond False end
when building diagrams
symbol AdditiveExpressionZegond
EdgeType.NON_TERMINAL
epsilon checking False
symbol C False end
when building diagrams
symbol C
EdgeType.NON_TERMINAL
epsilon checking False
symbol AdditiveExpressionPrime False end
when building diagrams
symbol AdditiveExpressionPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol C False end
when building diagrams
symbol C
EdgeType.NON_TERMINAL
epsilon checking False
symbol Relop False end
when building diagrams
symbol Relop
EdgeType.NON_TERMINAL
epsilon checking False
symbol AdditiveExpression False end
when building diagrams
symbol AdditiveExpression
EdgeType.NON_TERMINAL
epsilon checking False
symbol #relation True end
when building diagrams
symbol #relation
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol #push_in_semantic_stack True end
when building diagrams
symbol #push_in_semantic_stack
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol < False end
when building diagrams
symbol <
EdgeType.TERMINAL
epsilon checking False
symbol #push_in_semantic_stack True end
when building diagrams
symbol #push_in_semantic_stack
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol == False end
when building diagrams
symbol ==
EdgeType.TERMINAL
epsilon checking False
symbol Term False end
when building diagrams
symbol Term
EdgeType.NON_TERMINAL
epsilon checking False
symbol D False end
when building diagrams
symbol D
EdgeType.NON_TERMINAL
epsilon checking False
symbol TermPrime False end
when building diagrams
symbol TermPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol D False end
when building diagrams
symbol D
EdgeType.NON_TERMINAL
epsilon checking False
symbol TermZegond False end
when building diagrams
symbol TermZegond
EdgeType.NON_TERMINAL
epsilon checking False
symbol D False end
when building diagrams
symbol D
EdgeType.NON_TERMINAL
epsilon checking False
symbol Addop False end
when building diagrams
symbol Addop
EdgeType.NON_TERMINAL
epsilon checking False
symbol Term False end
when building diagrams
symbol Term
EdgeType.NON_TERMINAL
epsilon checking False
symbol #arithm_op True end
when building diagrams
symbol #arithm_op
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol D False end
when building diagrams
symbol D
EdgeType.NON_TERMINAL
epsilon checking False
symbol #push_in_semantic_stack True end
when building diagrams
symbol #push_in_semantic_stack
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol + False end
when building diagrams
symbol +
EdgeType.TERMINAL
epsilon checking False
symbol #push_in_semantic_stack True end
when building diagrams
symbol #push_in_semantic_stack
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol - False end
when building diagrams
symbol -
EdgeType.TERMINAL
epsilon checking False
symbol SignedFactor False end
when building diagrams
symbol SignedFactor
EdgeType.NON_TERMINAL
epsilon checking False
symbol G False end
when building diagrams
symbol G
EdgeType.NON_TERMINAL
epsilon checking False
symbol SignedFactorPrime False end
when building diagrams
symbol SignedFactorPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol G False end
when building diagrams
symbol G
EdgeType.NON_TERMINAL
epsilon checking False
symbol SignedFactorZegond False end
when building diagrams
symbol SignedFactorZegond
EdgeType.NON_TERMINAL
epsilon checking False
symbol G False end
when building diagrams
symbol G
EdgeType.NON_TERMINAL
epsilon checking False
symbol * False end
when building diagrams
symbol *
EdgeType.TERMINAL
epsilon checking False
symbol SignedFactor False end
when building diagrams
symbol SignedFactor
EdgeType.NON_TERMINAL
epsilon checking False
symbol #mult True end
when building diagrams
symbol #mult
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol G False end
when building diagrams
symbol G
EdgeType.NON_TERMINAL
epsilon checking False
symbol + False end
when building diagrams
symbol +
EdgeType.TERMINAL
epsilon checking False
symbol Factor False end
when building diagrams
symbol Factor
EdgeType.NON_TERMINAL
epsilon checking False
symbol - False end
when building diagrams
symbol -
EdgeType.TERMINAL
epsilon checking False
symbol Factor False end
when building diagrams
symbol Factor
EdgeType.NON_TERMINAL
epsilon checking False
symbol Factor False end
when building diagrams
symbol Factor
EdgeType.NON_TERMINAL
epsilon checking False
symbol FactorPrime False end
when building diagrams
symbol FactorPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol + False end
when building diagrams
symbol +
EdgeType.TERMINAL
epsilon checking False
symbol Factor False end
when building diagrams
symbol Factor
EdgeType.NON_TERMINAL
epsilon checking False
symbol - False end
when building diagrams
symbol -
EdgeType.TERMINAL
epsilon checking False
symbol Factor False end
when building diagrams
symbol Factor
EdgeType.NON_TERMINAL
epsilon checking False
symbol FactorZegond False end
when building diagrams
symbol FactorZegond
EdgeType.NON_TERMINAL
epsilon checking False
symbol ( False end
when building diagrams
symbol (
EdgeType.TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol ) False end
when building diagrams
symbol )
EdgeType.TERMINAL
epsilon checking False
symbol #pid True end
when building diagrams
symbol #pid
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ID False end
when building diagrams
symbol ID
EdgeType.TERMINAL
epsilon checking False
symbol VarCallPrime False end
when building diagrams
symbol VarCallPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol #push_imm_in_semantic_stack True end
when building diagrams
symbol #push_imm_in_semantic_stack
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol NUM False end
when building diagrams
symbol NUM
EdgeType.TERMINAL
epsilon checking False
symbol #args_begin True end
when building diagrams
symbol #args_begin
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ( False end
when building diagrams
symbol (
EdgeType.TERMINAL
epsilon checking False
symbol Args False end
when building diagrams
symbol Args
EdgeType.NON_TERMINAL
epsilon checking False
symbol ) False end
when building diagrams
symbol )
EdgeType.TERMINAL
epsilon checking False
symbol #args_end True end
when building diagrams
symbol #args_end
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol VarPrime False end
when building diagrams
symbol VarPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol [ False end
when building diagrams
symbol [
EdgeType.TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol ] False end
when building diagrams
symbol ]
EdgeType.TERMINAL
epsilon checking False
symbol #array_addr True end
when building diagrams
symbol #array_addr
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol #args_begin True end
when building diagrams
symbol #args_begin
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ( False end
when building diagrams
symbol (
EdgeType.TERMINAL
epsilon checking False
symbol Args False end
when building diagrams
symbol Args
EdgeType.NON_TERMINAL
epsilon checking False
symbol ) False end
when building diagrams
symbol )
EdgeType.TERMINAL
epsilon checking False
symbol #args_end True end
when building diagrams
symbol #args_end
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol ( False end
when building diagrams
symbol (
EdgeType.TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol ) False end
when building diagrams
symbol )
EdgeType.TERMINAL
epsilon checking False
symbol #push_imm_in_semantic_stack True end
when building diagrams
symbol #push_imm_in_semantic_stack
EdgeType.ACTION_SYMBOL
epsilon checking False
symbol NUM False end
when building diagrams
symbol NUM
EdgeType.TERMINAL
epsilon checking False
symbol ArgList False end
when building diagrams
symbol ArgList
EdgeType.NON_TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol ArgListPrime False end
when building diagrams
symbol ArgListPrime
EdgeType.NON_TERMINAL
epsilon checking False
symbol , False end
when building diagrams
symbol ,
EdgeType.TERMINAL
epsilon checking False
symbol Expression False end
when building diagrams
symbol Expression
EdgeType.NON_TERMINAL
epsilon checking False
symbol ArgListPrime False end
when building diagrams
symbol ArgListPrime
EdgeType.NON_TERMINAL
epsilon checking False

Diagram for Non-Terminal: Program
  State 0
    --[DeclarationList (NON_TERMINAL)]--> State 2
  State 1 (final)
  State 2
    --[$ (TERMINAL)]--> State 1

Diagram for Non-Terminal: DeclarationList
  State 3
    --[Declaration (NON_TERMINAL)]--> State 5
    --[epsilon (EPSILON)]--> State 4
  State 4 (final)
  State 5
    --[DeclarationList (NON_TERMINAL)]--> State 4

Diagram for Non-Terminal: Declaration
  State 6
    --[DeclarationInitial (NON_TERMINAL)]--> State 8
  State 7 (final)
  State 8
    --[DeclarationPrime (NON_TERMINAL)]--> State 7

Diagram for Non-Terminal: DeclarationInitial
  State 9
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 11
  State 10 (final)
  State 11
    --[TypeSpecifier (NON_TERMINAL)]--> State 12
  State 12
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 13
  State 13
    --[ID (TERMINAL)]--> State 10

Diagram for Non-Terminal: DeclarationPrime
  State 14
    --[FunDeclarationPrime (NON_TERMINAL)]--> State 15
    --[VarDeclarationPrime (NON_TERMINAL)]--> State 15
  State 15 (final)

Diagram for Non-Terminal: VarDeclarationPrime
  State 16
    --[; (TERMINAL)]--> State 18
    --[[ (TERMINAL)]--> State 19
  State 17 (final)
  State 18
    --[#var_declare (ACTION_SYMBOL)]--> State 17
  State 19
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 20
  State 20
    --[NUM (TERMINAL)]--> State 21
  State 21
    --[] (TERMINAL)]--> State 22
  State 22
    --[; (TERMINAL)]--> State 23
  State 23
    --[#arr_declare (ACTION_SYMBOL)]--> State 17

Diagram for Non-Terminal: FunDeclarationPrime
  State 24
    --[#func_declare (ACTION_SYMBOL)]--> State 26
  State 25 (final)
  State 26
    --[( (TERMINAL)]--> State 27
  State 27
    --[Params (NON_TERMINAL)]--> State 28
  State 28
    --[) (TERMINAL)]--> State 29
  State 29
    --[#args_info (ACTION_SYMBOL)]--> State 30
  State 30
    --[CompoundStmt (NON_TERMINAL)]--> State 31
  State 31
    --[#fun_end (ACTION_SYMBOL)]--> State 25

Diagram for Non-Terminal: TypeSpecifier
  State 32
    --[int (TERMINAL)]--> State 33
    --[void (TERMINAL)]--> State 33
  State 33 (final)

Diagram for Non-Terminal: Params
  State 34
    --[#push_param_in_semantic_stack (ACTION_SYMBOL)]--> State 36
    --[void (TERMINAL)]--> State 35
  State 35 (final)
  State 36
    --[int (TERMINAL)]--> State 37
  State 37
    --[#push_param_in_semantic_stack (ACTION_SYMBOL)]--> State 38
  State 38
    --[ID (TERMINAL)]--> State 39
  State 39
    --[ParamPrime (NON_TERMINAL)]--> State 40
  State 40
    --[ParamList (NON_TERMINAL)]--> State 35

Diagram for Non-Terminal: ParamList
  State 41
    --[, (TERMINAL)]--> State 43
    --[epsilon (EPSILON)]--> State 42
  State 42 (final)
  State 43
    --[Param (NON_TERMINAL)]--> State 44
  State 44
    --[ParamList (NON_TERMINAL)]--> State 42

Diagram for Non-Terminal: Param
  State 45
    --[DeclarationInitial (NON_TERMINAL)]--> State 47
  State 46 (final)
  State 47
    --[ParamPrime (NON_TERMINAL)]--> State 46

Diagram for Non-Terminal: ParamPrime
  State 48
    --[[ (TERMINAL)]--> State 50
    --[ε (EPSILON)]--> State 52
  State 49 (final)
  State 50
    --[] (TERMINAL)]--> State 51
  State 51
    --[#ptr_declare (ACTION_SYMBOL)]--> State 49
  State 52
    --[#param_declare (ACTION_SYMBOL)]--> State 49

Diagram for Non-Terminal: CompoundStmt
  State 53
    --[{ (TERMINAL)]--> State 55
  State 54 (final)
  State 55
    --[DeclarationList (NON_TERMINAL)]--> State 56
  State 56
    --[StatementList (NON_TERMINAL)]--> State 57
  State 57
    --[} (TERMINAL)]--> State 54

Diagram for Non-Terminal: StatementList
  State 58
    --[Statement (NON_TERMINAL)]--> State 60
    --[epsilon (EPSILON)]--> State 59
  State 59 (final)
  State 60
    --[StatementList (NON_TERMINAL)]--> State 59

Diagram for Non-Terminal: Statement
  State 61
    --[ExpressionStmt (NON_TERMINAL)]--> State 62
    --[CompoundStmt (NON_TERMINAL)]--> State 62
    --[SelectionStmt (NON_TERMINAL)]--> State 62
    --[IterationStmt (NON_TERMINAL)]--> State 62
    --[ReturnStmt (NON_TERMINAL)]--> State 62
  State 62 (final)

Diagram for Non-Terminal: ExpressionStmt
  State 63
    --[Expression (NON_TERMINAL)]--> State 65
    --[break (TERMINAL)]--> State 67
    --[; (TERMINAL)]--> State 64
  State 64 (final)
  State 65
    --[; (TERMINAL)]--> State 66
  State 66
    --[#remove_exp_result (ACTION_SYMBOL)]--> State 64
  State 67
    --[; (TERMINAL)]--> State 68
  State 68
    --[#br_save (ACTION_SYMBOL)]--> State 64

Diagram for Non-Terminal: SelectionStmt
  State 69
    --[if (TERMINAL)]--> State 71
  State 70 (final)
  State 71
    --[( (TERMINAL)]--> State 72
  State 72
    --[Expression (NON_TERMINAL)]--> State 73
  State 73
    --[) (TERMINAL)]--> State 74
  State 74
    --[#save_cond (ACTION_SYMBOL)]--> State 75
  State 75
    --[Statement (NON_TERMINAL)]--> State 76
  State 76
    --[else (TERMINAL)]--> State 77
  State 77
    --[#save_jpf (ACTION_SYMBOL)]--> State 78
  State 78
    --[Statement (NON_TERMINAL)]--> State 79
  State 79
    --[#jp (ACTION_SYMBOL)]--> State 70

Diagram for Non-Terminal: IterationStmt
  State 80
    --[while (TERMINAL)]--> State 82
  State 81 (final)
  State 82
    --[#save_while_uncond (ACTION_SYMBOL)]--> State 83
  State 83
    --[( (TERMINAL)]--> State 84
  State 84
    --[Expression (NON_TERMINAL)]--> State 85
  State 85
    --[) (TERMINAL)]--> State 86
  State 86
    --[#save_while_cond_jpf (ACTION_SYMBOL)]--> State 87
  State 87
    --[Statement (NON_TERMINAL)]--> State 88
  State 88
    --[#fill_while_body (ACTION_SYMBOL)]--> State 81

Diagram for Non-Terminal: ReturnStmt
  State 89
    --[return (TERMINAL)]--> State 91
  State 90 (final)
  State 91
    --[ReturnStmtPrime (NON_TERMINAL)]--> State 90

Diagram for Non-Terminal: ReturnStmtPrime
  State 92
    --[#return_jp (ACTION_SYMBOL)]--> State 94
    --[Expression (NON_TERMINAL)]--> State 95
  State 93 (final)
  State 94
    --[; (TERMINAL)]--> State 93
  State 95
    --[#save_return_value (ACTION_SYMBOL)]--> State 96
  State 96
    --[; (TERMINAL)]--> State 93

Diagram for Non-Terminal: Expression
  State 97
    --[SimpleExpressionZegond (NON_TERMINAL)]--> State 98
    --[#pid (ACTION_SYMBOL)]--> State 99
  State 98 (final)
  State 99
    --[ID (TERMINAL)]--> State 100
  State 100
    --[B (NON_TERMINAL)]--> State 98

Diagram for Non-Terminal: B
  State 101
    --[= (TERMINAL)]--> State 103
    --[[ (TERMINAL)]--> State 105
    --[SimpleExpressionPrime (NON_TERMINAL)]--> State 102
  State 102 (final)
  State 103
    --[Expression (NON_TERMINAL)]--> State 104
  State 104
    --[#assign (ACTION_SYMBOL)]--> State 102
  State 105
    --[Expression (NON_TERMINAL)]--> State 106
  State 106
    --[] (TERMINAL)]--> State 107
  State 107
    --[#array_addr (ACTION_SYMBOL)]--> State 108
  State 108
    --[H (NON_TERMINAL)]--> State 102

Diagram for Non-Terminal: H
  State 109
    --[= (TERMINAL)]--> State 111
    --[G (NON_TERMINAL)]--> State 113
  State 110 (final)
  State 111
    --[Expression (NON_TERMINAL)]--> State 112
  State 112
    --[#assign (ACTION_SYMBOL)]--> State 110
  State 113
    --[D (NON_TERMINAL)]--> State 114
  State 114
    --[C (NON_TERMINAL)]--> State 110

Diagram for Non-Terminal: SimpleExpressionZegond
  State 115
    --[AdditiveExpressionZegond (NON_TERMINAL)]--> State 117
  State 116 (final)
  State 117
    --[C (NON_TERMINAL)]--> State 116

Diagram for Non-Terminal: SimpleExpressionPrime
  State 118
    --[AdditiveExpressionPrime (NON_TERMINAL)]--> State 120
  State 119 (final)
  State 120
    --[C (NON_TERMINAL)]--> State 119

Diagram for Non-Terminal: C
  State 121
    --[Relop (NON_TERMINAL)]--> State 123
    --[epsilon (EPSILON)]--> State 122
  State 122 (final)
  State 123
    --[AdditiveExpression (NON_TERMINAL)]--> State 124
  State 124
    --[#relation (ACTION_SYMBOL)]--> State 122

Diagram for Non-Terminal: Relop
  State 125
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 127
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 128
  State 126 (final)
  State 127
    --[< (TERMINAL)]--> State 126
  State 128
    --[== (TERMINAL)]--> State 126

Diagram for Non-Terminal: AdditiveExpression
  State 129
    --[Term (NON_TERMINAL)]--> State 131
  State 130 (final)
  State 131
    --[D (NON_TERMINAL)]--> State 130

Diagram for Non-Terminal: AdditiveExpressionPrime
  State 132
    --[TermPrime (NON_TERMINAL)]--> State 134
  State 133 (final)
  State 134
    --[D (NON_TERMINAL)]--> State 133

Diagram for Non-Terminal: AdditiveExpressionZegond
  State 135
    --[TermZegond (NON_TERMINAL)]--> State 137
  State 136 (final)
  State 137
    --[D (NON_TERMINAL)]--> State 136

Diagram for Non-Terminal: D
  State 138
    --[Addop (NON_TERMINAL)]--> State 140
    --[epsilon (EPSILON)]--> State 139
  State 139 (final)
  State 140
    --[Term (NON_TERMINAL)]--> State 141
  State 141
    --[#arithm_op (ACTION_SYMBOL)]--> State 142
  State 142
    --[D (NON_TERMINAL)]--> State 139

Diagram for Non-Terminal: Addop
  State 143
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 145
    --[#push_in_semantic_stack (ACTION_SYMBOL)]--> State 146
  State 144 (final)
  State 145
    --[+ (TERMINAL)]--> State 144
  State 146
    --[- (TERMINAL)]--> State 144

Diagram for Non-Terminal: Term
  State 147
    --[SignedFactor (NON_TERMINAL)]--> State 149
  State 148 (final)
  State 149
    --[G (NON_TERMINAL)]--> State 148

Diagram for Non-Terminal: TermPrime
  State 150
    --[SignedFactorPrime (NON_TERMINAL)]--> State 152
  State 151 (final)
  State 152
    --[G (NON_TERMINAL)]--> State 151

Diagram for Non-Terminal: TermZegond
  State 153
    --[SignedFactorZegond (NON_TERMINAL)]--> State 155
  State 154 (final)
  State 155
    --[G (NON_TERMINAL)]--> State 154

Diagram for Non-Terminal: G
  State 156
    --[* (TERMINAL)]--> State 158
    --[epsilon (EPSILON)]--> State 157
  State 157 (final)
  State 158
    --[SignedFactor (NON_TERMINAL)]--> State 159
  State 159
    --[#mult (ACTION_SYMBOL)]--> State 160
  State 160
    --[G (NON_TERMINAL)]--> State 157

Diagram for Non-Terminal: SignedFactor
  State 161
    --[+ (TERMINAL)]--> State 163
    --[- (TERMINAL)]--> State 164
    --[Factor (NON_TERMINAL)]--> State 162
  State 162 (final)
  State 163
    --[Factor (NON_TERMINAL)]--> State 162
  State 164
    --[Factor (NON_TERMINAL)]--> State 162

Diagram for Non-Terminal: SignedFactorPrime
  State 165
    --[FactorPrime (NON_TERMINAL)]--> State 166
  State 166 (final)

Diagram for Non-Terminal: SignedFactorZegond
  State 167
    --[+ (TERMINAL)]--> State 169
    --[- (TERMINAL)]--> State 170
    --[FactorZegond (NON_TERMINAL)]--> State 168
  State 168 (final)
  State 169
    --[Factor (NON_TERMINAL)]--> State 168
  State 170
    --[Factor (NON_TERMINAL)]--> State 168

Diagram for Non-Terminal: Factor
  State 171
    --[( (TERMINAL)]--> State 173
    --[#pid (ACTION_SYMBOL)]--> State 175
    --[#push_imm_in_semantic_stack (ACTION_SYMBOL)]--> State 177
  State 172 (final)
  State 173
    --[Expression (NON_TERMINAL)]--> State 174
  State 174
    --[) (TERMINAL)]--> State 172
  State 175
    --[ID (TERMINAL)]--> State 176
  State 176
    --[VarCallPrime (NON_TERMINAL)]--> State 172
  State 177
    --[NUM (TERMINAL)]--> State 172

Diagram for Non-Terminal: VarCallPrime
  State 178
    --[#args_begin (ACTION_SYMBOL)]--> State 180
    --[VarPrime (NON_TERMINAL)]--> State 179
  State 179 (final)
  State 180
    --[( (TERMINAL)]--> State 181
  State 181
    --[Args (NON_TERMINAL)]--> State 182
  State 182
    --[) (TERMINAL)]--> State 183
  State 183
    --[#args_end (ACTION_SYMBOL)]--> State 179

Diagram for Non-Terminal: VarPrime
  State 184
    --[[ (TERMINAL)]--> State 186
    --[epsilon (EPSILON)]--> State 185
  State 185 (final)
  State 186
    --[Expression (NON_TERMINAL)]--> State 187
  State 187
    --[] (TERMINAL)]--> State 188
  State 188
    --[#array_addr (ACTION_SYMBOL)]--> State 185

Diagram for Non-Terminal: FactorPrime
  State 189
    --[#args_begin (ACTION_SYMBOL)]--> State 191
    --[epsilon (EPSILON)]--> State 190
  State 190 (final)
  State 191
    --[( (TERMINAL)]--> State 192
  State 192
    --[Args (NON_TERMINAL)]--> State 193
  State 193
    --[) (TERMINAL)]--> State 194
  State 194
    --[#args_end (ACTION_SYMBOL)]--> State 190

Diagram for Non-Terminal: FactorZegond
  State 195
    --[( (TERMINAL)]--> State 197
    --[#push_imm_in_semantic_stack (ACTION_SYMBOL)]--> State 199
  State 196 (final)
  State 197
    --[Expression (NON_TERMINAL)]--> State 198
  State 198
    --[) (TERMINAL)]--> State 196
  State 199
    --[NUM (TERMINAL)]--> State 196

Diagram for Non-Terminal: Args
  State 200
    --[ArgList (NON_TERMINAL)]--> State 201
    --[epsilon (EPSILON)]--> State 201
  State 201 (final)

Diagram for Non-Terminal: ArgList
  State 202
    --[Expression (NON_TERMINAL)]--> State 204
  State 203 (final)
  State 204
    --[ArgListPrime (NON_TERMINAL)]--> State 203

Diagram for Non-Terminal: ArgListPrime
  State 205
    --[, (TERMINAL)]--> State 207
    --[epsilon (EPSILON)]--> State 206
  State 206 (final)
  State 207
    --[Expression (NON_TERMINAL)]--> State 208
  State 208
    --[ArgListPrime (NON_TERMINAL)]--> State 206
MY ACTION CALLED: #push_in_semantic_stack
pushed void with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_in_semantic_stack
pushed printArray with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #func_declare
stack pointer before popping: 2
popping printArray for #func_declare
stack pointer before popping: 1
popping void for #func_declare
func name in func declaration: printArray
pushed printArray with type <class 'str'> for #func_declare
pushed #arguments with type <class 'str'> for #func_declare
printing stack after #arguments:
PRINTING SEMANTIC STACK
printArray
#arguments
SEMANTIC STACK FINISHED
MY ACTION CALLED: #push_param_in_semantic_stack
pushed int with type <class 'str'> for #push_param_in_semantic_stack
MY ACTION CALLED: #push_param_in_semantic_stack
pushed A with type <class 'str'> for #push_param_in_semantic_stack
MY ACTION CALLED: #ptr_declare
stack pointer before popping: 4
popping A for #ptr_declare
stack pointer before popping: 3
popping int for #ptr_declare
pushed A with type <class 'str'> for #ptr_declare
pushed array with type <class 'str'> for #ptr_declare
MY ACTION CALLED: #push_in_semantic_stack
pushed int with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_in_semantic_stack
pushed size with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #param_declare
stack pointer before popping: 6
popping size for #param_declare
stack pointer before popping: 5
popping int for #param_declare
pushed int with type <class 'str'> for #param_declare
pushed size with type <class 'str'> for #param_declare
MY ACTION CALLED: #args_info
printing stack before calling top in arguments:
PRINTING SEMANTIC STACK
printArray
#arguments
A
array
int
size
SEMANTIC STACK FINISHED
sp when calling top 6
arg i: 1
stack pointer before popping: 6
popping size for #args_info
stack pointer before popping: 5
popping int for #args_info
sp when calling top 4
arg i: 2
stack pointer before popping: 4
popping array for #args_info
stack pointer before popping: 3
popping A for #args_info
sp when calling top 2
stack pointer before popping: 2
popping #arguments for #args_info
stack pointer before popping: 1
popping printArray for #args_info
my function name printArray
PRINTING SEMANTIC STACK
SEMANTIC STACK FINISHED
None
Function Arguments: [<Phase3.src.CodeGenerator.FunctionArg object at 0x1024d8e10>, <Phase3.src.CodeGenerator.FunctionArg object at 0x1024d8f90>]
SELF FUNCS: [<Phase3.src.CodeGenerator.FunctionObject object at 0x1024d7bd0>]
CHECK Functions, name: ~~~ printArray ~~~ <class 'type'> void looking for printArray
MY ACTION CALLED: #push_in_semantic_stack
pushed int with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_in_semantic_stack
pushed i with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #var_declare
stack pointer before popping: 2
popping i for #var_declare
stack pointer before popping: 1
popping int for #var_declare
MY ACTION CALLED: #pid
addr 524 token i is_func False
pushed 524 with type <class 'int'> for #pid
MY ACTION CALLED: #push_imm_in_semantic_stack
pushed #0 with type <class 'str'> for #push_imm_in_semantic_stack
MY ACTION CALLED: #assign
ASSIGNMENT
PRINTING SEMANTIC STACK
524
#0
SEMANTIC STACK FINISHED
stack pointer before popping: 2
popping #0 for #assign
stack pointer before popping: 1
popping 524 for #assign
pushed 524 with type <class 'int'> for #assign
MY ACTION CALLED: #remove_exp_result
REMOVE LAST EXP RESULT
PRINTING SEMANTIC STACK
524
SEMANTIC STACK FINISHED
stack pointer before popping: 1
popping 524 for #remove_exp_result
MY ACTION CALLED: #save_while_uncond
pushed 2 with type <class 'int'> for #save_while_uncond
While save: saved address 2
MY ACTION CALLED: #pid
addr 524 token i is_func False
pushed 524 with type <class 'int'> for #pid
MY ACTION CALLED: #push_in_semantic_stack
pushed < with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #pid
addr 516 token size is_func False
pushed 516 with type <class 'int'> for #pid
MY ACTION CALLED: #relation
stack pointer before popping: 4
popping 516 for #relation
stack pointer before popping: 3
popping < for #relation
stack pointer before popping: 2
popping 524 for #relation
pushed 700 with type <class 'int'> for #relation
MY ACTION CALLED: #save_while_cond_jpf
pushed 4 with type <class 'int'> for #save_while_cond_jpf
While cond jump: reserved JPF at address 4
PRINTING SEMANTIC STACK
2
700
4
SEMANTIC STACK FINISHED
MY ACTION CALLED: #pid
addr None token output is_func True
pushed output with type <class 'str'> for #pid
MY ACTION CALLED: #args_begin
Reached beginning of function arguments
sp when calling top 4
Function name at top of stack: output
args for output
pushed #call_args with type <class 'str'> for #args_begin
MY ACTION CALLED: #pid
addr 508 token A is_func False
pushed 508 with type <class 'int'> for #pid
MY ACTION CALLED: #pid
addr 524 token i is_func False
pushed 524 with type <class 'int'> for #pid
MY ACTION CALLED: #array_addr
stack pointer before popping: 7
popping 524 for #array_addr
stack pointer before popping: 6
popping 508 for #array_addr
pushed @708 with type <class 'str'> for #array_addr
MY ACTION CALLED: #args_end
sp when calling top 6
PRINTING SEMANTIC STACK
2
700
4
output
#call_args
@708
SEMANTIC STACK FINISHED
Collecting argument from stack
stack pointer before popping: 6
popping @708 for #args_end
sp when calling top 5
stack pointer before popping: 5
popping #call_args for #args_end
stack pointer before popping: 4
popping output for #args_end
Function call end: output with args: ['@708']
Generated PRINT instruction for output(@708)
pushed @708 with type <class 'str'> for #args_end
MY ACTION CALLED: #remove_exp_result
REMOVE LAST EXP RESULT
PRINTING SEMANTIC STACK
2
700
4
@708
SEMANTIC STACK FINISHED
stack pointer before popping: 4
popping @708 for #remove_exp_result
MY ACTION CALLED: #pid
addr 524 token i is_func False
pushed 524 with type <class 'int'> for #pid
MY ACTION CALLED: #pid
addr 524 token i is_func False
pushed 524 with type <class 'int'> for #pid
MY ACTION CALLED: #push_in_semantic_stack
pushed + with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_imm_in_semantic_stack
pushed #1 with type <class 'str'> for #push_imm_in_semantic_stack
MY ACTION CALLED: #arithm_op
stack pointer before popping: 7
popping #1 for #arithm_op
stack pointer before popping: 6
popping + for #arithm_op
stack pointer before popping: 5
popping 524 for #arithm_op
pushed 712 with type <class 'int'> for #arithm_op
MY ACTION CALLED: #assign
ASSIGNMENT
PRINTING SEMANTIC STACK
2
700
4
524
712
SEMANTIC STACK FINISHED
stack pointer before popping: 5
popping 712 for #assign
stack pointer before popping: 4
popping 524 for #assign
pushed 524 with type <class 'int'> for #assign
MY ACTION CALLED: #remove_exp_result
REMOVE LAST EXP RESULT
PRINTING SEMANTIC STACK
2
700
4
524
SEMANTIC STACK FINISHED
stack pointer before popping: 4
popping 524 for #remove_exp_result
MY ACTION CALLED: #fill_while_body
Fill while - stack before:
PRINTING SEMANTIC STACK
2
700
4
SEMANTIC STACK FINISHED
stack pointer before popping: 3
popping 4 for #fill_while_body
stack pointer before popping: 2
popping 700 for #fill_while_body
stack pointer before popping: 1
popping 2 for #fill_while_body
Fill while: JPF at 4 -> 14, JP back to 2
MY ACTION CALLED: #fun_end
return inst
Currnet function printArray
SELF FUNCS: [<Phase3.src.CodeGenerator.FunctionObject object at 0x1024d7bd0>]
CHECK Functions, name: ~~~ printArray ~~~ <class 'type'> void looking for printArray
MY ACTION CALLED: #push_in_semantic_stack
pushed int with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_in_semantic_stack
pushed add with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #func_declare
stack pointer before popping: 2
popping add for #func_declare
stack pointer before popping: 1
popping int for #func_declare
func name in func declaration: add
pushed add with type <class 'str'> for #func_declare
pushed #arguments with type <class 'str'> for #func_declare
printing stack after #arguments:
PRINTING SEMANTIC STACK
add
#arguments
SEMANTIC STACK FINISHED
MY ACTION CALLED: #push_param_in_semantic_stack
pushed int with type <class 'str'> for #push_param_in_semantic_stack
MY ACTION CALLED: #push_param_in_semantic_stack
pushed a with type <class 'str'> for #push_param_in_semantic_stack
MY ACTION CALLED: #param_declare
stack pointer before popping: 4
popping a for #param_declare
stack pointer before popping: 3
popping int for #param_declare
pushed int with type <class 'str'> for #param_declare
pushed a with type <class 'str'> for #param_declare
MY ACTION CALLED: #args_info
printing stack before calling top in arguments:
PRINTING SEMANTIC STACK
add
#arguments
int
a
SEMANTIC STACK FINISHED
sp when calling top 4
arg i: 1
stack pointer before popping: 4
popping a for #args_info
stack pointer before popping: 3
popping int for #args_info
sp when calling top 2
stack pointer before popping: 2
popping #arguments for #args_info
stack pointer before popping: 1
popping add for #args_info
my function name add
PRINTING SEMANTIC STACK
SEMANTIC STACK FINISHED
None
Function Arguments: [<Phase3.src.CodeGenerator.FunctionArg object at 0x1024d9150>]
SELF FUNCS: [<Phase3.src.CodeGenerator.FunctionObject object at 0x1024d7bd0>, <Phase3.src.CodeGenerator.FunctionObject object at 0x1024d8250>]
CHECK Functions, name: ~~~ printArray ~~~ <class 'type'> void looking for add
CHECK Functions, name: ~~~ add ~~~ <class 'type'> int looking for add
MY ACTION CALLED: #pid
addr 536 token a is_func False
pushed 536 with type <class 'int'> for #pid
MY ACTION CALLED: #push_in_semantic_stack
pushed + with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_imm_in_semantic_stack
pushed #100 with type <class 'str'> for #push_imm_in_semantic_stack
MY ACTION CALLED: #arithm_op
stack pointer before popping: 3
popping #100 for #arithm_op
stack pointer before popping: 2
popping + for #arithm_op
stack pointer before popping: 1
popping 536 for #arithm_op
pushed 716 with type <class 'int'> for #arithm_op
MY ACTION CALLED: #save_return_value
return with value
stack pointer before popping: 1
popping 716 for #save_return_value
MY ACTION CALLED: #fun_end
return inst
Currnet function add
SELF FUNCS: [<Phase3.src.CodeGenerator.FunctionObject object at 0x1024d7bd0>, <Phase3.src.CodeGenerator.FunctionObject object at 0x1024d8250>]
CHECK Functions, name: ~~~ printArray ~~~ <class 'type'> void looking for add
CHECK Functions, name: ~~~ add ~~~ <class 'type'> int looking for add
MY ACTION CALLED: #push_in_semantic_stack
pushed void with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_in_semantic_stack
pushed main with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #func_declare
stack pointer before popping: 2
popping main for #func_declare
stack pointer before popping: 1
popping void for #func_declare
func name in func declaration: main
pushed main with type <class 'str'> for #func_declare
pushed #arguments with type <class 'str'> for #func_declare
printing stack after #arguments:
PRINTING SEMANTIC STACK
main
#arguments
SEMANTIC STACK FINISHED
MY ACTION CALLED: #args_info
printing stack before calling top in arguments:
PRINTING SEMANTIC STACK
main
#arguments
SEMANTIC STACK FINISHED
sp when calling top 2
stack pointer before popping: 2
popping #arguments for #args_info
stack pointer before popping: 1
popping main for #args_info
my function name main
PRINTING SEMANTIC STACK
SEMANTIC STACK FINISHED
None
Function Arguments: []
MY ACTION CALLED: #push_in_semantic_stack
pushed int with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_in_semantic_stack
pushed arrsize with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #var_declare
stack pointer before popping: 2
popping arrsize for #var_declare
stack pointer before popping: 1
popping int for #var_declare
MY ACTION CALLED: #push_in_semantic_stack
pushed int with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_in_semantic_stack
pushed i with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #var_declare
stack pointer before popping: 2
popping i for #var_declare
stack pointer before popping: 1
popping int for #var_declare
MY ACTION CALLED: #push_in_semantic_stack
pushed int with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_in_semantic_stack
pushed j with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #var_declare
stack pointer before popping: 2
popping j for #var_declare
stack pointer before popping: 1
popping int for #var_declare
MY ACTION CALLED: #push_in_semantic_stack
pushed int with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_in_semantic_stack
pushed arr with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_in_semantic_stack
pushed 10 with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #arr_declare
stack pointer before popping: 3
popping 10 for #arr_declare
stack pointer before popping: 2
popping arr for #arr_declare
MY ACTION CALLED: #pid
addr 544 token i is_func False
pushed 544 with type <class 'int'> for #pid
MY ACTION CALLED: #push_imm_in_semantic_stack
pushed #0 with type <class 'str'> for #push_imm_in_semantic_stack
MY ACTION CALLED: #assign
ASSIGNMENT
PRINTING SEMANTIC STACK
int
544
#0
SEMANTIC STACK FINISHED
stack pointer before popping: 3
popping #0 for #assign
stack pointer before popping: 2
popping 544 for #assign
pushed 544 with type <class 'int'> for #assign
MY ACTION CALLED: #remove_exp_result
REMOVE LAST EXP RESULT
PRINTING SEMANTIC STACK
int
544
SEMANTIC STACK FINISHED
stack pointer before popping: 2
popping 544 for #remove_exp_result
MY ACTION CALLED: #pid
addr 540 token arrsize is_func False
pushed 540 with type <class 'int'> for #pid
MY ACTION CALLED: #push_imm_in_semantic_stack
pushed #10 with type <class 'str'> for #push_imm_in_semantic_stack
MY ACTION CALLED: #assign
ASSIGNMENT
PRINTING SEMANTIC STACK
int
540
#10
SEMANTIC STACK FINISHED
stack pointer before popping: 3
popping #10 for #assign
stack pointer before popping: 2
popping 540 for #assign
pushed 540 with type <class 'int'> for #assign
MY ACTION CALLED: #remove_exp_result
REMOVE LAST EXP RESULT
PRINTING SEMANTIC STACK
int
540
SEMANTIC STACK FINISHED
stack pointer before popping: 2
popping 540 for #remove_exp_result
MY ACTION CALLED: #save_while_uncond
pushed 23 with type <class 'int'> for #save_while_uncond
While save: saved address 23
MY ACTION CALLED: #pid
addr 544 token i is_func False
pushed 544 with type <class 'int'> for #pid
MY ACTION CALLED: #push_in_semantic_stack
pushed < with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #pid
addr 540 token arrsize is_func False
pushed 540 with type <class 'int'> for #pid
MY ACTION CALLED: #relation
stack pointer before popping: 5
popping 540 for #relation
stack pointer before popping: 4
popping < for #relation
stack pointer before popping: 3
popping 544 for #relation
pushed 720 with type <class 'int'> for #relation
MY ACTION CALLED: #save_while_cond_jpf
pushed 25 with type <class 'int'> for #save_while_cond_jpf
While cond jump: reserved JPF at address 25
PRINTING SEMANTIC STACK
int
23
720
25
SEMANTIC STACK FINISHED
MY ACTION CALLED: #pid
addr 552 token arr is_func False
pushed 552 with type <class 'int'> for #pid
MY ACTION CALLED: #pid
addr 544 token i is_func False
pushed 544 with type <class 'int'> for #pid
MY ACTION CALLED: #array_addr
stack pointer before popping: 6
popping 544 for #array_addr
stack pointer before popping: 5
popping 552 for #array_addr
pushed @728 with type <class 'str'> for #array_addr
MY ACTION CALLED: #pid
addr 544 token i is_func False
pushed 544 with type <class 'int'> for #pid
MY ACTION CALLED: #assign
ASSIGNMENT
PRINTING SEMANTIC STACK
int
23
720
25
@728
544
SEMANTIC STACK FINISHED
stack pointer before popping: 6
popping 544 for #assign
stack pointer before popping: 5
popping @728 for #assign
pushed @728 with type <class 'str'> for #assign
MY ACTION CALLED: #remove_exp_result
REMOVE LAST EXP RESULT
PRINTING SEMANTIC STACK
int
23
720
25
@728
SEMANTIC STACK FINISHED
stack pointer before popping: 5
popping @728 for #remove_exp_result
MY ACTION CALLED: #pid
addr 544 token i is_func False
pushed 544 with type <class 'int'> for #pid
MY ACTION CALLED: #pid
addr 544 token i is_func False
pushed 544 with type <class 'int'> for #pid
MY ACTION CALLED: #push_in_semantic_stack
pushed + with type <class 'str'> for #push_in_semantic_stack
MY ACTION CALLED: #push_imm_in_semantic_stack
pushed #1 with type <class 'str'> for #push_imm_in_semantic_stack
MY ACTION CALLED: #arithm_op
stack pointer before popping: 8
popping #1 for #arithm_op
stack pointer before popping: 7
popping + for #arithm_op
stack pointer before popping: 6
popping 544 for #arithm_op
pushed 732 with type <class 'int'> for #arithm_op
MY ACTION CALLED: #assign
ASSIGNMENT
PRINTING SEMANTIC STACK
int
23
720
25
544
732
SEMANTIC STACK FINISHED
stack pointer before popping: 6
popping 732 for #assign
stack pointer before popping: 5
popping 544 for #assign
pushed 544 with type <class 'int'> for #assign
MY ACTION CALLED: #remove_exp_result
REMOVE LAST EXP RESULT
PRINTING SEMANTIC STACK
int
23
720
25
544
SEMANTIC STACK FINISHED
stack pointer before popping: 5
popping 544 for #remove_exp_result
MY ACTION CALLED: #fill_while_body
Fill while - stack before:
PRINTING SEMANTIC STACK
int
23
720
25
SEMANTIC STACK FINISHED
stack pointer before popping: 4
popping 25 for #fill_while_body
stack pointer before popping: 3
popping 720 for #fill_while_body
stack pointer before popping: 2
popping 23 for #fill_while_body
Fill while: JPF at 25 -> 35, JP back to 23
MY ACTION CALLED: #pid
addr 548 token j is_func False
pushed 548 with type <class 'int'> for #pid
MY ACTION CALLED: #pid
addr 552 token arr is_func False
pushed 552 with type <class 'int'> for #pid
MY ACTION CALLED: #push_imm_in_semantic_stack
pushed #7 with type <class 'str'> for #push_imm_in_semantic_stack
MY ACTION CALLED: #array_addr
stack pointer before popping: 4
popping #7 for #array_addr
stack pointer before popping: 3
popping 552 for #array_addr
pushed @740 with type <class 'str'> for #array_addr
MY ACTION CALLED: #assign
ASSIGNMENT
PRINTING SEMANTIC STACK
int
548
@740
SEMANTIC STACK FINISHED
stack pointer before popping: 3
popping @740 for #assign
stack pointer before popping: 2
popping 548 for #assign
pushed 548 with type <class 'int'> for #assign
MY ACTION CALLED: #remove_exp_result
REMOVE LAST EXP RESULT
PRINTING SEMANTIC STACK
int
548
SEMANTIC STACK FINISHED
stack pointer before popping: 2
popping 548 for #remove_exp_result
MY ACTION CALLED: #pid
addr None token output is_func True
pushed output with type <class 'str'> for #pid
MY ACTION CALLED: #args_begin
Reached beginning of function arguments
sp when calling top 2
Function name at top of stack: output
args for output
pushed #call_args with type <class 'str'> for #args_begin
MY ACTION CALLED: #pid
addr 548 token j is_func False
pushed 548 with type <class 'int'> for #pid
MY ACTION CALLED: #args_end
sp when calling top 4
PRINTING SEMANTIC STACK
int
output
#call_args
548
SEMANTIC STACK FINISHED
Collecting argument from stack
stack pointer before popping: 4
popping 548 for #args_end
sp when calling top 3
stack pointer before popping: 3
popping #call_args for #args_end
stack pointer before popping: 2
popping output for #args_end
Function call end: output with args: [548]
Generated PRINT instruction for output(548)
pushed 548 with type <class 'int'> for #args_end
MY ACTION CALLED: #remove_exp_result
REMOVE LAST EXP RESULT
PRINTING SEMANTIC STACK
int
548
SEMANTIC STACK FINISHED
stack pointer before popping: 2
popping 548 for #remove_exp_result
MY ACTION CALLED: #fun_end
return inst
Currnet function main
