Program ~ DeclarationList $
DeclarationList ~ Declaration DeclarationList
DeclarationList ~ ε
Declaration ~ DeclarationInitial DeclarationPrime
DeclarationInitial ~ #push_in_semantic_stack TypeSpecifier #push_in_semantic_stack ID                                                
DeclarationPrime ~ FunDeclarationPrime
DeclarationPrime ~ VarDeclarationPrime
VarDeclarationPrime ~ ; #var_declare                                                                      
VarDeclarationPrime ~ [ #push_in_semantic_stack NUM ] ; #arr_declare                                                    
FunDeclarationPrime ~ #func_declare ( Params ) #args_info CompoundStmt #fun_end
TypeSpecifier ~ int
TypeSpecifier ~ void
Params ~ #push_param_in_semantic_stack int #push_param_in_semantic_stack ID ParamPrime ParamList
Params ~ void
ParamList ~ , Param ParamList
ParamList ~ ε
Param ~ DeclarationInitial ParamPrime
ParamPrime ~ [ ] #param_declare
ParamPrime ~ ε #param_declare
CompoundStmt ~ { DeclarationList StatementList }
StatementList ~ Statement StatementList
StatementList ~ ε
Statement ~ ExpressionStmt
Statement ~ CompoundStmt
Statement ~ SelectionStmt
Statement ~ IterationStmt
Statement ~ ReturnStmt
ExpressionStmt ~ Expression ;
ExpressionStmt ~ break ; #br_save                                                          
ExpressionStmt ~ ;
SelectionStmt ~ if ( Expression ) #save_cond Statement else #save_jpf Statement #jp
IterationStmt ~ while #save_while_uncond ( Expression ) #save_while_cond_jpf Statement #fill_while_body
ReturnStmt ~ return ReturnStmtPrime
ReturnStmtPrime ~ #return_jp ;                                                                        
ReturnStmtPrime ~ Expression #save_return_value ;
Expression ~ SimpleExpressionZegond
Expression ~ #pid ID B 
B ~ = Expression #assign
B ~ [ Expression ] #array_addr H
B ~ SimpleExpressionPrime
H ~ = Expression #assign
H ~ G D C
SimpleExpressionZegond ~ AdditiveExpressionZegond C
SimpleExpressionPrime ~ AdditiveExpressionPrime C
C ~ Relop AdditiveExpression #relation
C ~ ε
Relop ~ #push_in_semantic_stack <
Relop ~ #push_in_semantic_stack ==
AdditiveExpression ~ Term D
AdditiveExpressionPrime ~ TermPrime D
AdditiveExpressionZegond ~ TermZegond D
D ~ Addop Term #arithm_op D
D ~ ε
Addop ~ #push_in_semantic_stack +
Addop ~ #push_in_semantic_stack -
Term ~ SignedFactor G
TermPrime ~ SignedFactorPrime G
TermZegond ~ SignedFactorZegond G
G ~ * SignedFactor #mult G
G ~ ε
SignedFactor ~ + Factor
SignedFactor ~ - Factor
SignedFactor ~ Factor
SignedFactorPrime ~ FactorPrime
SignedFactorZegond ~ + Factor
SignedFactorZegond ~ - Factor
SignedFactorZegond ~ FactorZegond
Factor ~ ( Expression )
Factor ~ #pid ID VarCallPrime
Factor ~ #push_imm_in_semantic_stack NUM
VarCallPrime ~ #args_begin ( Args ) #args_end
VarCallPrime ~ VarPrime
VarPrime ~ [ Expression ] #array_addr
VarPrime ~ ε
FactorPrime ~ #args_begin ( Args ) #args_end
FactorPrime ~ ε
FactorZegond ~ ( Expression )
FactorZegond ~ #push_imm_in_semantic_stack NUM
Args ~ ArgList
Args ~ ε
ArgList ~ Expression ArgListPrime
ArgListPrime ~ , Expression ArgListPrime
ArgListPrime ~ ε
