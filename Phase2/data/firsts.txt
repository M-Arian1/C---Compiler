Start: int void
Program: int void
DeclarationList: int void epsilon
Declaration: int void
DeclarationInitial: int void
DeclarationPrime: ( ; [
VarDeclarationPrime: ; [
FunDeclarationPrime: (
TypeSpecifier: int void
Params: int void
ParamList: , epsilon
Param: int
ParamPrime: [ epsilon
CompoundStmt: {
StatementList: if while return break ; { ID NUM ( epsilon
Statement: if while return break ; { ID NUM (
ExpressionStmt: ID NUM ( break ; 
SelectionStmt: if
IterationStmt: while
ReturnStmtreturn: ; ID NUM (
ReturnStmtPrime: ; ID NUM (
Expression: ID NUM (
B: = [ + - ID NUM ( epsilon
H: ID NUM ( + - * epsilon
SimpleExpressionZegond: + - ID NUM (
SimpleExpressionPrime: + - ID NUM (
C: < == epsilon
Relop: < ==
AdditiveExpression: + - ID NUM (
AdditiveExpressionPrime: + - ID NUM (
AdditiveExpressionZegond: + - ID NUM (
D: + - epsilon
Addop: + -
Term: + - ID NUM (
TermPrime: + - ID NUM (
TermZegond: + - ID NUM (
G: * epsilon
SignedFactor: + - ID NUM (
SignedFactorPrime: ID NUM ( epsilon
SignedFactorZegond: + - ID NUM (
Factor: ID NUM (
VarCallPrime: ( [ epsilon
VarPrime: [ epsilon
FactorPrime: ( epsilon
FactorZegond: NUM (
Args: ID NUM ( epsilon
ArgList: ID NUM (
ArgListPrime: , epsilon
