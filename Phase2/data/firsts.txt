AdditiveExpression: ( ID NUM +
AdditiveExpressionPrime: + - ID NUM (
AdditiveExpressionZegond: + - ID NUM (
Addop: + -
ArgList: + - ID NUM (
ArgListPrime: , ε
Args: + - ID NUM ( ε
B: = [ + - ID NUM (
C: < == ε
CompoundStmt: {
D: + - ε
Declaration: int void
DeclarationInitial: int void
DeclarationList: int void ε
DeclarationPrime: ( ; [
Expression: + - ID NUM (
ExpressionStmt: ; break + - ID NUM (
Factor: ID NUM (
FactorPrime: ( ε
FactorZegond: NUM (
FunDeclarationPrime: (
G: * ε
H: = * + - ID NUM ( < ==
IterationStmt: while
Param: int void
ParamList: , ε
ParamPrime: [ ε
Params: int void
Program: int void
Relop: < ==
ReturnStmt: return
ReturnStmtPrime: ; + - ID NUM (
SelectionStmt: if
SignedFactor: + - ID NUM (
SignedFactorPrime: ID NUM ( ε
SignedFactorZegond: + - NUM (
SimpleExpressionPrime: + - ID NUM ( < == ε
SimpleExpressionZegond: + - ID NUM ( < == ε
Statement: ; break { if while return + - ID NUM (
StatementList: ; break { if while return + - ID NUM ( ε
Term: + - ID NUM (
TermPrime: + - ID NUM (
TermZegond: + - NUM (
TypeSpecifier: int void
VarCallPrime: ( ε
VarDeclarationPrime: ; [
VarPrime: [ ε