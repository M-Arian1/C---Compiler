AdditiveExpression: ; ) ] , < ==
AdditiveExpressionPrime: ; ) ] , < ==
AdditiveExpressionZegond: ; ) ] , < ==
Addop: ID NUM (
ArgList: )
ArgListPrime: )
Args: )
B: ; ) ] , < ==
C: ; ) ] , < ==
CompoundStmt: ; ) ] , else
D: ; ) ] , < ==
Declaration: int void }
DeclarationInitial: ; ( [ ]
DeclarationList: }
DeclarationPrime: int void }
Expression: ; ) ] , < ==
ExpressionStmt: } while if return else break ; {
Factor: * + - ; ) ] , < ==
FactorPrime: * + - ; ) ] , < ==
FactorZegond: * + - ; ) ] , < ==
FunDeclarationPrime: int void }
G: ; ) ] , < ==
H: ; ) ] , < ==
Param: ) ,
ParamList: )
ParamPrime: ) ,
Params: )
Program: $
Relop: ID NUM (
ReturnStmt: ; } else while if return
ReturnStmtPrime: } else while if return
SelectionStmt: ; } else while if return
SignedFactor: * + - ; ) ] , < ==
SignedFactorPrime: * + - ; ) ] , < ==
SignedFactorZegond: * + - ; ) ] , < ==
SimpleExpressionPrime: ; ) ] , < ==
SimpleExpressionZegond: ; ) ] , < ==
Statement: ; } else while if return
StatementList: }
Term: ; ) ] , < ==
TermPrime: ; ) ] , < ==
TermZegond: ; ) ] , < ==
TypeSpecifier: ID
VarCallPrime: * + - ; ) ] , < ==
VarDeclarationPrime: int void }
VarPrime: * + - ; ) ] , < ==